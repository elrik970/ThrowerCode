//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Snake"",
            ""id"": ""c04500bf-30a8-4fd1-b9f6-8fae0b1d85c0"",
            ""actions"": [
                {
                    ""name"": ""ZPositive"",
                    ""type"": ""Button"",
                    ""id"": ""4d57cb0d-183a-460a-baf9-283231805bf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZNegative"",
                    ""type"": ""Button"",
                    ""id"": ""c67b9927-d188-4ca8-a925-cc9f351c059c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""XPositive"",
                    ""type"": ""Button"",
                    ""id"": ""f89c7f85-3387-465f-b3cd-92ad2298d6dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""XNegative"",
                    ""type"": ""Button"",
                    ""id"": ""0b390001-ba59-4e15-bb9b-73c529e9ef46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""776b45ac-1f2e-4de3-8de6-da017ba8e336"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12f33f12-a1d7-477c-a507-910d1d23fc30"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2df3183e-451d-4677-a570-e9f26f440853"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02f71c28-af01-4eeb-86cd-57b2ab2ac9dd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""838390f2-af3c-438c-a98e-8ab62cc0e6f6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""850d5140-f279-4542-a498-5aa282efe346"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""5e4c9b46-d8b8-4096-b474-51b2b04d7dd0"",
            ""actions"": [
                {
                    ""name"": ""GrabObject"",
                    ""type"": ""Button"",
                    ""id"": ""c98ef805-91a1-452e-b017-e5ec552fc97c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""faed90f3-e91a-4b65-84f1-eadd467d640f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""c134e503-41c2-4bb1-89d4-62e05bad1afe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4c31c91-68fb-46a6-837f-551b73cc34fe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ffe6161-8f81-493c-9e42-f886bebe72dd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b905c4a-335d-46c5-982d-a8f4511c3dd6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Snake
        m_Snake = asset.FindActionMap("Snake", throwIfNotFound: true);
        m_Snake_ZPositive = m_Snake.FindAction("ZPositive", throwIfNotFound: true);
        m_Snake_ZNegative = m_Snake.FindAction("ZNegative", throwIfNotFound: true);
        m_Snake_XPositive = m_Snake.FindAction("XPositive", throwIfNotFound: true);
        m_Snake_XNegative = m_Snake.FindAction("XNegative", throwIfNotFound: true);
        m_Snake_Jump = m_Snake.FindAction("Jump", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_GrabObject = m_Player.FindAction("GrabObject", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Heal = m_Player.FindAction("Heal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Snake
    private readonly InputActionMap m_Snake;
    private List<ISnakeActions> m_SnakeActionsCallbackInterfaces = new List<ISnakeActions>();
    private readonly InputAction m_Snake_ZPositive;
    private readonly InputAction m_Snake_ZNegative;
    private readonly InputAction m_Snake_XPositive;
    private readonly InputAction m_Snake_XNegative;
    private readonly InputAction m_Snake_Jump;
    public struct SnakeActions
    {
        private @PlayerInputs m_Wrapper;
        public SnakeActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZPositive => m_Wrapper.m_Snake_ZPositive;
        public InputAction @ZNegative => m_Wrapper.m_Snake_ZNegative;
        public InputAction @XPositive => m_Wrapper.m_Snake_XPositive;
        public InputAction @XNegative => m_Wrapper.m_Snake_XNegative;
        public InputAction @Jump => m_Wrapper.m_Snake_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Snake; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnakeActions set) { return set.Get(); }
        public void AddCallbacks(ISnakeActions instance)
        {
            if (instance == null || m_Wrapper.m_SnakeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SnakeActionsCallbackInterfaces.Add(instance);
            @ZPositive.started += instance.OnZPositive;
            @ZPositive.performed += instance.OnZPositive;
            @ZPositive.canceled += instance.OnZPositive;
            @ZNegative.started += instance.OnZNegative;
            @ZNegative.performed += instance.OnZNegative;
            @ZNegative.canceled += instance.OnZNegative;
            @XPositive.started += instance.OnXPositive;
            @XPositive.performed += instance.OnXPositive;
            @XPositive.canceled += instance.OnXPositive;
            @XNegative.started += instance.OnXNegative;
            @XNegative.performed += instance.OnXNegative;
            @XNegative.canceled += instance.OnXNegative;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(ISnakeActions instance)
        {
            @ZPositive.started -= instance.OnZPositive;
            @ZPositive.performed -= instance.OnZPositive;
            @ZPositive.canceled -= instance.OnZPositive;
            @ZNegative.started -= instance.OnZNegative;
            @ZNegative.performed -= instance.OnZNegative;
            @ZNegative.canceled -= instance.OnZNegative;
            @XPositive.started -= instance.OnXPositive;
            @XPositive.performed -= instance.OnXPositive;
            @XPositive.canceled -= instance.OnXPositive;
            @XNegative.started -= instance.OnXNegative;
            @XNegative.performed -= instance.OnXNegative;
            @XNegative.canceled -= instance.OnXNegative;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(ISnakeActions instance)
        {
            if (m_Wrapper.m_SnakeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISnakeActions instance)
        {
            foreach (var item in m_Wrapper.m_SnakeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SnakeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SnakeActions @Snake => new SnakeActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_GrabObject;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Heal;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @GrabObject => m_Wrapper.m_Player_GrabObject;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Heal => m_Wrapper.m_Player_Heal;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @GrabObject.started += instance.OnGrabObject;
            @GrabObject.performed += instance.OnGrabObject;
            @GrabObject.canceled += instance.OnGrabObject;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Heal.started += instance.OnHeal;
            @Heal.performed += instance.OnHeal;
            @Heal.canceled += instance.OnHeal;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @GrabObject.started -= instance.OnGrabObject;
            @GrabObject.performed -= instance.OnGrabObject;
            @GrabObject.canceled -= instance.OnGrabObject;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Heal.started -= instance.OnHeal;
            @Heal.performed -= instance.OnHeal;
            @Heal.canceled -= instance.OnHeal;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface ISnakeActions
    {
        void OnZPositive(InputAction.CallbackContext context);
        void OnZNegative(InputAction.CallbackContext context);
        void OnXPositive(InputAction.CallbackContext context);
        void OnXNegative(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnGrabObject(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnHeal(InputAction.CallbackContext context);
    }
}
